package main

import (
	"bufio"
	"bytes"
	"encoding/gob"
	"flag"
	"fmt"
	vegeta "github.com/tsenart/vegeta/lib"
	"io"
	"log"
	"net/http"
	"os"
	"time"
)

var (
	targetHost     = flag.String("target-host", "localhost:9070", "target's hostname with port")
	targetDuration = flag.Duration("duration", 10*time.Second, "Duration of the attack")
	targetRate     = flag.Uint64("rate", 50, "Requests per second")
	inputFile      = flag.String("input-file", "", "Path to the request file generated by GOR")
)

type RawRequest struct {
	Timestamp int64
	Request   []byte
}

func parseRequest(data []byte) (request *http.Request, err error) {
	buf := bytes.NewBuffer(data)
	reader := bufio.NewReader(buf)
	request, err = http.ReadRequest(reader)
	return
}

func generateVegetaTargets(input *os.File, targetHost string) vegeta.Targets {
	var targets vegeta.Targets
	decoder := gob.NewDecoder(input)

	for {
		raw := new(RawRequest)
		err := decoder.Decode(raw)
		if err == io.EOF {
			break
		} else if err != nil {
			log.Printf("Error decoding value: %s\n", err.Error())
			continue
		}

		r, err := parseRequest(raw.Request)
		if err != nil {
			log.Printf("Error parsing request: %s\n", err.Error())
			continue
		}

		b := new(bytes.Buffer)
		b.ReadFrom(r.Body)
		t := vegeta.Target{Method: r.Method,
			URL:    fmt.Sprintf("http://%s%s", targetHost, r.URL.String()),
			Body:   b.Bytes(),
			Header: r.Header}
		targets = append(targets, t)

	}
	return targets
}

func main() {
	flag.Parse()
	if *inputFile == "" {
		log.Fatalf("input-file must be specified")
	}
	file, err := os.Open(*inputFile)
	if err != nil {
		log.Fatalf("Could not open file %s. Error: %s\n", file, err.Error())
	}
	targets := generateVegetaTargets(file, *targetHost)
	results := vegeta.Attack(targets, *targetRate, *targetDuration)
	report, err := vegeta.ReportText(results)
	if err != nil {
		log.Fatalf("Error generating metrics report: %s", err.Error())
	} else {
		fmt.Printf(string(report))
	}
}
